name: üîç Universal Basic Quality Check

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  basic-check:
    name: üìã Universal Basic Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîç Project Detection & Analysis
        id: detect
        run: |
          echo "üîç Analyzing project structure..."
          
          # Initialize detection results
          PROJECT_TYPES=""
          FRAMEWORK=""
          CHECKS_AVAILABLE=""
          
          # Language Detection
          if [ -f "package.json" ]; then
            PROJECT_TYPES="${PROJECT_TYPES}nodejs "
            CHECKS_AVAILABLE="${CHECKS_AVAILABLE}nodejs-syntax nodejs-deps "
            echo "‚úÖ Node.js project detected (package.json found)"
            
            # Framework detection for Node.js
            if grep -q "next" package.json 2>/dev/null; then
              FRAMEWORK="nextjs"
              echo "  üì¶ Next.js framework detected"
            elif grep -q "react" package.json 2>/dev/null; then
              FRAMEWORK="react"
              echo "  ‚öõÔ∏è  React framework detected"
            elif grep -q "express" package.json 2>/dev/null; then
              FRAMEWORK="express"
              echo "  üöÄ Express framework detected"
            fi
          fi
          
          if [ -f "composer.json" ] || find . -maxdepth 2 -name "*.php" -type f | head -1 | grep -q .; then
            PROJECT_TYPES="${PROJECT_TYPES}php "
            CHECKS_AVAILABLE="${CHECKS_AVAILABLE}php-syntax "
            echo "‚úÖ PHP project detected"
            
            # WordPress detection
            if find . -maxdepth 1 -name "*.php" -exec grep -l "Plugin Name:" {} \; | head -1 | grep -q .; then
              FRAMEWORK="wordpress-plugin"
              echo "  üîå WordPress Plugin detected"
            elif [ -f "wp-config.php" ] || [ -f "wp-config-sample.php" ]; then
              FRAMEWORK="wordpress"
              echo "  üì∞ WordPress site detected"
            fi
          fi
          
          if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || find . -maxdepth 2 -name "*.py" -type f | head -1 | grep -q .; then
            PROJECT_TYPES="${PROJECT_TYPES}python "
            CHECKS_AVAILABLE="${CHECKS_AVAILABLE}python-syntax "
            echo "‚úÖ Python project detected"
          fi
          
          if [ -f "go.mod" ] || find . -maxdepth 2 -name "*.go" -type f | head -1 | grep -q .; then
            PROJECT_TYPES="${PROJECT_TYPES}go "
            CHECKS_AVAILABLE="${CHECKS_AVAILABLE}go-syntax "
            echo "‚úÖ Go project detected"
          fi
          
          if [ -f "Cargo.toml" ] || find . -maxdepth 2 -name "*.rs" -type f | head -1 | grep -q .; then
            PROJECT_TYPES="${PROJECT_TYPES}rust "
            CHECKS_AVAILABLE="${CHECKS_AVAILABLE}rust-syntax "
            echo "‚úÖ Rust project detected"
          fi
          
          # Always available checks
          CHECKS_AVAILABLE="${CHECKS_AVAILABLE}structure readme "
          
          # Check for custom configuration
          if [ -f ".github/basic-check-config.yml" ]; then
            echo "‚öôÔ∏è  Custom configuration found"
            CHECKS_AVAILABLE="${CHECKS_AVAILABLE}custom-config "
          fi
          
          # Export results for next steps
          echo "project_types=${PROJECT_TYPES}" >> $GITHUB_OUTPUT
          echo "framework=${FRAMEWORK}" >> $GITHUB_OUTPUT
          echo "checks_available=${CHECKS_AVAILABLE}" >> $GITHUB_OUTPUT
          
          # Summary
          echo "### üîç Project Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Languages**: ${PROJECT_TYPES:-None detected}" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework**: ${FRAMEWORK:-Generic}" >> $GITHUB_STEP_SUMMARY
          echo "- **Available Checks**: ${CHECKS_AVAILABLE}" >> $GITHUB_STEP_SUMMARY

      - name: üèóÔ∏è Project Structure Check
        run: |
          echo "üèóÔ∏è Checking basic project structure..."
          
          STRUCTURE_ISSUES=0
          
          # Check for essential files
          if [ ! -f "README.md" ] && [ ! -f "readme.md" ] && [ ! -f "README.rst" ]; then
            echo "‚ö†Ô∏è  No README file found"
            ((STRUCTURE_ISSUES++))
          else
            echo "‚úÖ README file exists"
          fi
          
          if [ ! -f ".gitignore" ]; then
            echo "‚ö†Ô∏è  No .gitignore file found"
            ((STRUCTURE_ISSUES++))
          else
            echo "‚úÖ .gitignore file exists"
          fi
          
          # Check directory structure sanity
          if [ -d "node_modules" ]; then
            echo "‚ö†Ô∏è  node_modules directory should be in .gitignore"
            ((STRUCTURE_ISSUES++))
          fi
          
          if [ -d ".git" ]; then
            echo "‚úÖ Git repository properly initialized"
          else
            echo "‚ùå Not a Git repository"
            ((STRUCTURE_ISSUES++))
          fi
          
          echo "structure_issues=${STRUCTURE_ISSUES}" >> $GITHUB_ENV

      - name: üì¶ Node.js Checks
        if: contains(steps.detect.outputs.project_types, 'nodejs')
        run: |
          echo "üì¶ Running Node.js specific checks..."
          
          # Package.json validation
          if ! node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))" 2>/dev/null; then
            echo "‚ùå Invalid package.json format"
            exit 1
          else
            echo "‚úÖ package.json is valid JSON"
          fi
          
          # Check for required scripts
          if grep -q '"scripts"' package.json; then
            echo "‚úÖ Scripts section found in package.json"
          else
            echo "‚ö†Ô∏è  No scripts section in package.json"
          fi
          
          # Basic JavaScript/TypeScript syntax check
          echo "üî® Checking JavaScript/TypeScript syntax..."
          JS_ERRORS=0
          
          # Check JS files
          if find . -name "*.js" -not -path "./node_modules/*" -not -path "./.next/*" -not -path "./dist/*" | head -10 | while read file; do
            if ! node --check "$file" 2>/dev/null; then
              echo "‚ùå Syntax error in: $file"
              ((JS_ERRORS++))
            fi
          done; then
            echo "‚úÖ JavaScript syntax check passed"
          fi
          
          # Check TS files if TypeScript is used
          if find . -name "*.ts" -o -name "*.tsx" | head -1 | grep -q .; then
            if grep -q typescript package.json 2>/dev/null; then
              echo "‚úÖ TypeScript project with dependency"
            else
              echo "‚ö†Ô∏è  TypeScript files found but no TypeScript dependency"
            fi
          fi

      - name: üêò PHP Checks
        if: contains(steps.detect.outputs.project_types, 'php')
        run: |
          echo "üêò Running PHP specific checks..."
          
          # PHP syntax check
          echo "üî® Checking PHP syntax..."
          PHP_ERRORS=0
          
          find . -name "*.php" -not -path "./vendor/*" | while read file; do
            if ! php -l "$file" >/dev/null 2>&1; then
              echo "‚ùå PHP syntax error in: $file"
              ((PHP_ERRORS++))
            fi
          done
          
          if [ $PHP_ERRORS -eq 0 ]; then
            echo "‚úÖ All PHP files have valid syntax"
          else
            echo "‚ùå Found $PHP_ERRORS PHP syntax errors"
            exit 1
          fi
          
          # Composer validation
          if [ -f "composer.json" ]; then
            if composer validate --no-check-publish --quiet 2>/dev/null; then
              echo "‚úÖ composer.json is valid"
            else
              echo "‚ö†Ô∏è  composer.json validation issues"
            fi
          fi

      - name: üîå WordPress Plugin Checks
        if: steps.detect.outputs.framework == 'wordpress-plugin'
        run: |
          echo "üîå Running WordPress Plugin specific checks..."
          
          # Find main plugin file
          PLUGIN_FILE=$(find . -maxdepth 1 -name "*.php" -exec grep -l "Plugin Name:" {} \; | head -1)
          
          if [ -n "$PLUGIN_FILE" ]; then
            echo "‚úÖ Main plugin file found: $(basename $PLUGIN_FILE)"
            
            # Check required headers
            if grep -q "Plugin Name:" "$PLUGIN_FILE" && 
               grep -q "Description:" "$PLUGIN_FILE" && 
               grep -q "Version:" "$PLUGIN_FILE"; then
              echo "‚úÖ Required WordPress plugin headers present"
            else
              echo "‚ö†Ô∏è  Missing required WordPress plugin headers"
            fi
            
            # Check plugin structure
            if [ -d "includes" ] || [ -d "inc" ] || [ -d "lib" ]; then
              echo "‚úÖ Plugin includes directory structure found"
            fi
            
          else
            echo "‚ùå No WordPress plugin main file found"
            exit 1
          fi

      - name: üêç Python Checks
        if: contains(steps.detect.outputs.project_types, 'python')
        run: |
          echo "üêç Running Python specific checks..."
          
          # Python syntax check
          echo "üî® Checking Python syntax..."
          find . -name "*.py" -not -path "./venv/*" -not -path "./.venv/*" | while read file; do
            if ! python3 -m py_compile "$file" 2>/dev/null; then
              echo "‚ùå Python syntax error in: $file"
            else
              echo "‚úÖ $file syntax OK"
            fi
          done
          
          # Requirements check
          if [ -f "requirements.txt" ]; then
            echo "‚úÖ requirements.txt found"
            if [ -s "requirements.txt" ]; then
              echo "‚úÖ requirements.txt is not empty"
            else
              echo "‚ö†Ô∏è  requirements.txt is empty"
            fi
          elif [ -f "pyproject.toml" ]; then
            echo "‚úÖ pyproject.toml found"
          else
            echo "‚ö†Ô∏è  No requirements.txt or pyproject.toml found"
          fi

      - name: üöÄ Go Checks
        if: contains(steps.detect.outputs.project_types, 'go')
        run: |
          echo "üöÄ Running Go specific checks..."
          
          # Go mod verification
          if [ -f "go.mod" ]; then
            echo "‚úÖ go.mod found"
            if go mod verify 2>/dev/null; then
              echo "‚úÖ Go modules verified"
            else
              echo "‚ö†Ô∏è  Go modules verification issues"
            fi
          fi
          
          # Go syntax check
          if go build -o /dev/null ./... 2>/dev/null; then
            echo "‚úÖ Go build successful"
          else
            echo "‚ö†Ô∏è  Go build issues detected"
          fi

      - name: ü¶Ä Rust Checks
        if: contains(steps.detect.outputs.project_types, 'rust')
        run: |
          echo "ü¶Ä Running Rust specific checks..."
          
          # Cargo check
          if [ -f "Cargo.toml" ]; then
            echo "‚úÖ Cargo.toml found"
            if cargo check --quiet 2>/dev/null; then
              echo "‚úÖ Cargo check passed"
            else
              echo "‚ö†Ô∏è  Cargo check issues detected"
            fi
          fi

      - name: ‚öôÔ∏è Custom Configuration Support
        if: contains(steps.detect.outputs.checks_available, 'custom-config')
        run: |
          echo "‚öôÔ∏è Processing custom configuration..."
          echo "üìÑ Custom config file: .github/basic-check-config.yml"
          echo "‚ÑπÔ∏è  Custom commands and checks would be processed here"
          # Note: In a real implementation, we would parse YAML and run custom commands

      - name: üìä Final Summary
        run: |
          echo "### ‚úÖ Universal Basic Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Project info
          echo "**Project Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Languages: ${{ steps.detect.outputs.project_types }}" >> $GITHUB_STEP_SUMMARY
          echo "- Framework: ${{ steps.detect.outputs.framework }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Structure issues
          if [ "${structure_issues:-0}" -gt 0 ]; then
            echo "**‚ö†Ô∏è  Structure Issues Found: ${structure_issues}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**‚úÖ Project Structure: Clean**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Completion status
          echo "**üéØ Check Status:**" >> $GITHUB_STEP_SUMMARY
          echo "- Basic structure validation completed" >> $GITHUB_STEP_SUMMARY
          echo "- Language-specific checks completed" >> $GITHUB_STEP_SUMMARY
          echo "- Framework-specific checks completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîß Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review any warnings or issues found" >> $GITHUB_STEP_SUMMARY
          echo "- Consider adding \`.github/basic-check-config.yml\` for custom checks" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all critical files (README, .gitignore) are present" >> $GITHUB_STEP_SUMMARY
          
          echo ""
          echo "üéâ Universal basic quality check completed!"