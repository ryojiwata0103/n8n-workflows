name: 🔄 Continuous Integration

on:
  push:
    branches: [main, develop, feature/**]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # 手動実行を可能にする

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # === 基本品質チェック ===
  quality-check:
    name: 🔍 Quality & Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # claude.md更新チェック用

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
        continue-on-error: true  # テンプレートリポジトリでは依存関係がない場合がある

      - name: 📚 Install dependencies
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "📦 Installing dependencies..."
            pnpm install --frozen-lockfile
          else
            echo "⚠️ No pnpm-lock.yaml found - template repository mode"
            if [ -f "package.json" ]; then
              echo "📦 Installing dependencies without lockfile..."
              pnpm install
            else
              echo "ℹ️ No package.json found - skipping dependency installation"
            fi
          fi

      - name: 🔨 TypeScript compilation check
        run: |
          if [ -f "package.json" ] && [ -f "tsconfig.json" ]; then
            echo "🔨 Running TypeScript compilation..."
            pnpm run build || echo "No build script or TypeScript compilation failed"
          elif [ -f "package.json" ]; then
            echo "ℹ️ No tsconfig.json found - skipping TypeScript compilation"
          else
            echo "ℹ️ No package.json found - skipping compilation check"
          fi

      - name: 🧪 Run tests with coverage
        run: |
          if [ -f "package.json" ]; then
            pnpm run test:coverage || pnpm test || echo "No tests configured"
          else
            echo "ℹ️ No package.json found - skipping tests"
          fi

      - name: 🎨 Code formatting check
        run: |
          if [ -f "package.json" ]; then
            pnpm run format:check || pnpm run prettier:check || echo "No formatting configured"
          else
            echo "ℹ️ No package.json found - skipping formatting check"
          fi

      - name: 🔍 ESLint check
        run: |
          if [ -f "package.json" ]; then
            pnpm run lint || echo "No linting configured"
          else
            echo "ℹ️ No package.json found - skipping linting"
          fi

      # === Claude.md 更新確認（既存機能との連携） ===
      - name: 📝 Claude.md update verification
        id: claude_check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "claude.md"; then
            echo "✅ claude.md updated - excellent documentation practice!"
            echo "claude_updated=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ claude.md not updated in this commit"
            echo "claude_updated=false" >> $GITHUB_OUTPUT
          fi

      # === セキュリティスキャン ===
      - name: 🔒 Security audit
        run: |
          if [ -f "package.json" ] && [ -f "pnpm-lock.yaml" ]; then
            pnpm audit --audit-level moderate || echo "No security vulnerabilities at moderate level"
          elif [ -f "package.json" ]; then
            echo "ℹ️ No lock file found - skipping security audit"
          else
            echo "ℹ️ No package.json found - skipping security audit"
          fi

      # === 依存関係チェック ===
      - name: 📋 Dependency vulnerability check
        run: |
          if command -v pnpm &> /dev/null; then
            pnpm audit --json > audit-result.json || true
            if [ -s audit-result.json ]; then
              echo "🔍 Security audit completed"
              cat audit-result.json | jq '.advisories | length' || echo "No vulnerabilities detected"
            fi
          fi

      # === テスト結果のアップロード ===
      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 5

  # === ビルドテスト ===
  build-test:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: quality-check
    
    strategy:
      matrix:
        node-version: ['18', '20', '22'] # 複数Node.jsバージョンでテスト
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: ⚙️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔨 Build project
        run: pnpm run build

      - name: 🎯 Build artifact check
        run: |
          if [ -d "dist" ] || [ -d "build" ] || [ -d ".next" ] || [ -d "out" ]; then
            echo "✅ Build artifacts generated successfully"
            ls -la dist/ build/ .next/ out/ 2>/dev/null || true
          else
            echo "ℹ️ No standard build directory found"
          fi

  # === PR専用チェック ===
  pr-checks:
    name: 🔄 PR-Specific Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 全履歴を取得してPR範囲を確認

      - name: 📋 PR Title Check
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          
          # 基本的なPRタイトル検証
          if [[ ${#PR_TITLE} -lt 10 ]]; then
            echo "⚠️ PR title seems too short (less than 10 characters)"
            echo "Consider adding more descriptive information"
          else
            echo "✅ PR title length is appropriate"
          fi

      - name: 📊 Changed files summary
        run: |
          echo "### 📁 Changed Files in this PR" >> $GITHUB_STEP_SUMMARY
          git diff --name-only origin/${{ github.base_ref }}..HEAD | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done

      - name: 🔍 Large files detection
        run: |
          # 大きなファイル（>1MB）の検出
          git diff --name-only origin/${{ github.base_ref }}..HEAD | while read file; do
            if [ -f "$file" ] && [ $(stat -c%s "$file" 2>/dev/null || echo 0) -gt 1048576 ]; then
              echo "⚠️ Large file detected: $file ($(stat -c%s "$file" | numfmt --to=iec))"
            fi
          done

  # === 統合ステータスチェック ===
  integration-status:
    name: ✅ Integration Status
    runs-on: ubuntu-latest
    needs: [quality-check, build-test]
    if: always()
    
    steps:
      - name: 📊 Integration Summary
        run: |
          echo "## 🎯 CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.quality-check.result }}" == "success" ]; then
            echo "- ✅ Quality Check: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Quality Check: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-test.result }}" == "success" ]; then
            echo "- ✅ Build Test: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Build Test: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Claude Code Action available via @claude mention" >> $GITHUB_STEP_SUMMARY
          echo "- Check claude.md for project documentation updates" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 Success notification
        if: needs.quality-check.result == 'success' && needs.build-test.result == 'success'
        run: |
          echo "🎉 All checks passed successfully!"
          echo "Ready for review and deployment"

      - name: ⚠️ Failure notification
        if: needs.quality-check.result != 'success' || needs.build-test.result != 'success'
        run: |
          echo "⚠️ Some checks failed"
          echo "Please review the logs and fix issues before merging"
          exit 1